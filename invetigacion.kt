¿Que es un fragmento?
Un Fragment representa un comportamiento o una parte de la interfaz de usuario en una Activity. Puedes combinar múltiples fragmentos en una sola actividad para crear una IU multipanel y volver a usar un fragmento en múltiples actividades. Puedes pensar en un fragmento como una sección modular de una actividad que tiene su ciclo de vida propio, recibe sus propios eventos de entrada y que puedes agregar o quitar mientras la actividad se esté ejecutando algo así como una subactividad que puedes volver a usar en diferentes actividades.

¿Cuales son las capacidades de un fragmento en una aplicación android?
Como habíamos mencionado, los fragmentos tienen un ciclo de vida que los asemejan a las actividades. La diferencia esta en que el ciclo de vida de un fragmento depende del ciclo de vida de una actividad  y además un fragmento posee algunas características extras, ya que es muy común alterarlos en tiempo de ejecución.
Cuando una actividad está en su estado de reanudación, todos los fragmentos que esta contiene pueden actuar independientemente y pasar a sus otros estados sin ningún problema. Pero si en algún momento la actividad pasa a pausa, entonces todos los fragmentos siguen su comportamiento, al igual que si pasa a detención o se destruye.

¿Como se pueden agregar o quitar fragmentos?
Para crear un fragmento, debes crear una subclase Fragment (o una subclase existente de ella). La clase Fragment tiene un código que se asemeja bastante a una Activity. Contiene métodos callback similares a los de una actividad, como onCreate(), onStart(),onPause() y onStop(). De hecho, si estás convirtiendo una aplicación de Android existente para utilizar fragmentos, deberías simplemente trasladar código de los métodos callback de tu actividad a los métodos callback respectivos de tu fragmento. Generalmente, debes implementar al menos los siguientes métodos del ciclo de vida.

¿Como funciona la interacción entre fragmentos?
Para reutilizar los componentes de la Interfaz de Usuario del Fragment, deberías crear cada uno como un contenedor de ellos mismos, componentes modulares que definen su propio layout y comportamiento. Una vez que has definido dichos fragmentos reutilizables, puedes asociarlos con una actividad y conectarlos con la lógica de la aplicación.A menudo querrás que uno fragmento se comunique con otro, por ejemplo para cambiar el contenido, basándose en un petición del usuario. Todas las comunicaciones Fragmento a Fragmento se hacen a través de la actividad asociada. Dos fragmentos no deberían comunicarse nunca directamente.

¿Es importante el uso de fragmentos en la programación movil?
Cuando empezaron a aparecer dispositivos de gran tamaño tipo tablet, el equipo de Android tuvo que solucionar el problema de la adaptación de la interfaz gráfica de las aplicaciones a ese nuevo tipo de pantallas. Una interfaz de usuario diseñada para un teléfono móvil no se adaptaba fácilmente a una pantalla varias pulgadas mayor. La solución a esto vino en forma de un nuevo tipo de componente llamado Fragment.
Un fragment no puede considerarse ni un control ni un contenedor, aunque se parecería más a lo segundo. Un fragment podría definirse como una porción de la interfaz de usuario que puede añadirse o eliminarse de la interfaz de forma independiente al resto de elementos de la actividad, y que por supuesto puede reutilizarse en otras actividades. Esto, aunque en principio puede parecer algo trivial, nos va a permitir poder dividir nuestra interfaz en varias porciones de forma que podamos diseñar diversas configuraciones de pantalla, dependiendo de su tamaño y orientación, sin tener que duplicar código en ningún momento, sino tan sólo utilizando o no los distintos fragmentos para cada una de las posibles configuraciones. Intentemos aclarar esto un poco con un ejemplo.

¿Existe alguna plantilla prediseñada para trabajar confragmentos en AS? si es así ¿cual es y como se usa?
Un fragmento generalmente se usa como parte de la interfaz de usuario de una actividad y aporta su propio diseño a la actividad.Para proporcionar un diseño para un fragmento, debes implementar el método de callback onCreateView(), al cual el sistema Android llama cuando llega el momento de que el fragmento defina su diseño. Tu implementación de este método debe devolver una View que es la raíz del diseño de tu fragmento. Para mostrar un diseño desde onCreateView(), puedes agrandarlo desde un recurso de diseño definido en XML. Para ayudarte a hacerlo, onCreateView() proporciona un objeto LayoutInflater. Por ejemplo, a continuación se muestra una subclase de Fragment que carga un diseño desde el archivoexample_fragment.xml.